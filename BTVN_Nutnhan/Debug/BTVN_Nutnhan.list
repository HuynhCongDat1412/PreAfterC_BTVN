
BTVN_Nutnhan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001320  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800142c  0800142c  0001142c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001450  08001450  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001450  08001450  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001450  08001450  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001450  08001450  00011450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001454  08001454  00011454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  2000000c  08001464  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08001464  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002df2  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000fde  00000000  00000000  00022e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000450  00000000  00000000  00023e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000315  00000000  00000000  00024298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015a99  00000000  00000000  000245ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000051f0  00000000  00000000  0003a046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007bc42  00000000  00000000  0003f236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ee8  00000000  00000000  000bae78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000bbd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001414 	.word	0x08001414

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001414 	.word	0x08001414

0800014c <nut_nhan>:
} led_t;

led_t led_sta = led_tat;

void nut_nhan(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
	if ((GPIOx == GPIOA) && (GPIO_Pin == GPIO_PIN_1))
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	4a11      	ldr	r2, [pc, #68]	; (80001a0 <nut_nhan+0x54>)
 800015c:	4293      	cmp	r3, r2
 800015e:	d119      	bne.n	8000194 <nut_nhan+0x48>
 8000160:	887b      	ldrh	r3, [r7, #2]
 8000162:	2b02      	cmp	r3, #2
 8000164:	d116      	bne.n	8000194 <nut_nhan+0x48>
	{
		switch (led_sta)
 8000166:	4b0f      	ldr	r3, [pc, #60]	; (80001a4 <nut_nhan+0x58>)
 8000168:	781b      	ldrb	r3, [r3, #0]
 800016a:	2b02      	cmp	r3, #2
 800016c:	d00e      	beq.n	800018c <nut_nhan+0x40>
 800016e:	2b02      	cmp	r3, #2
 8000170:	dc10      	bgt.n	8000194 <nut_nhan+0x48>
 8000172:	2b00      	cmp	r3, #0
 8000174:	d002      	beq.n	800017c <nut_nhan+0x30>
 8000176:	2b01      	cmp	r3, #1
 8000178:	d004      	beq.n	8000184 <nut_nhan+0x38>
			case led_blink_5Hz:
				led_sta = led_tat;
				break;
		}
	}
}
 800017a:	e00b      	b.n	8000194 <nut_nhan+0x48>
				led_sta = led_blink_1Hz;
 800017c:	4b09      	ldr	r3, [pc, #36]	; (80001a4 <nut_nhan+0x58>)
 800017e:	2201      	movs	r2, #1
 8000180:	701a      	strb	r2, [r3, #0]
				break;
 8000182:	e007      	b.n	8000194 <nut_nhan+0x48>
				led_sta = led_blink_5Hz;
 8000184:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <nut_nhan+0x58>)
 8000186:	2202      	movs	r2, #2
 8000188:	701a      	strb	r2, [r3, #0]
				break;
 800018a:	e003      	b.n	8000194 <nut_nhan+0x48>
				led_sta = led_tat;
 800018c:	4b05      	ldr	r3, [pc, #20]	; (80001a4 <nut_nhan+0x58>)
 800018e:	2200      	movs	r2, #0
 8000190:	701a      	strb	r2, [r3, #0]
				break;
 8000192:	bf00      	nop
}
 8000194:	bf00      	nop
 8000196:	370c      	adds	r7, #12
 8000198:	46bd      	mov	sp, r7
 800019a:	bc80      	pop	{r7}
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	40010800 	.word	0x40010800
 80001a4:	20000050 	.word	0x20000050

080001a8 <xuly_led_blink5Hz>:
void xuly_led_blink5Hz()
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	static uint32_t tg_blink2;
	if (HAL_GetTick()- tg_blink2 >= 100)
 80001ac:	f000 fa04 	bl	80005b8 <HAL_GetTick>
 80001b0:	4602      	mov	r2, r0
 80001b2:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <xuly_led_blink5Hz+0x2c>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	1ad3      	subs	r3, r2, r3
 80001b8:	2b63      	cmp	r3, #99	; 0x63
 80001ba:	d909      	bls.n	80001d0 <xuly_led_blink5Hz+0x28>
			{
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_14);
 80001bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001c0:	4805      	ldr	r0, [pc, #20]	; (80001d8 <xuly_led_blink5Hz+0x30>)
 80001c2:	f000 fc9a 	bl	8000afa <HAL_GPIO_TogglePin>
				tg_blink2 = HAL_GetTick();
 80001c6:	f000 f9f7 	bl	80005b8 <HAL_GetTick>
 80001ca:	4603      	mov	r3, r0
 80001cc:	4a01      	ldr	r2, [pc, #4]	; (80001d4 <xuly_led_blink5Hz+0x2c>)
 80001ce:	6013      	str	r3, [r2, #0]
			}
}
 80001d0:	bf00      	nop
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	20000054 	.word	0x20000054
 80001d8:	40011000 	.word	0x40011000

080001dc <xuly_led_blink1Hz>:

void xuly_led_blink1Hz()
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	static uint32_t tg_blink1;
	if (HAL_GetTick()- tg_blink1 >= 500)
 80001e0:	f000 f9ea 	bl	80005b8 <HAL_GetTick>
 80001e4:	4602      	mov	r2, r0
 80001e6:	4b09      	ldr	r3, [pc, #36]	; (800020c <xuly_led_blink1Hz+0x30>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	1ad3      	subs	r3, r2, r3
 80001ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80001f0:	d309      	bcc.n	8000206 <xuly_led_blink1Hz+0x2a>
	{
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f6:	4806      	ldr	r0, [pc, #24]	; (8000210 <xuly_led_blink1Hz+0x34>)
 80001f8:	f000 fc7f 	bl	8000afa <HAL_GPIO_TogglePin>
		tg_blink1 = HAL_GetTick();
 80001fc:	f000 f9dc 	bl	80005b8 <HAL_GetTick>
 8000200:	4603      	mov	r3, r0
 8000202:	4a02      	ldr	r2, [pc, #8]	; (800020c <xuly_led_blink1Hz+0x30>)
 8000204:	6013      	str	r3, [r2, #0]
	}
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000058 	.word	0x20000058
 8000210:	40011000 	.word	0x40011000

08000214 <xuly_led_tat>:

void xuly_led_tat()
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000218:	2201      	movs	r2, #1
 800021a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800021e:	4805      	ldr	r0, [pc, #20]	; (8000234 <xuly_led_tat+0x20>)
 8000220:	f000 fc53 	bl	8000aca <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, 0);
 8000224:	2200      	movs	r2, #0
 8000226:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800022a:	4802      	ldr	r0, [pc, #8]	; (8000234 <xuly_led_tat+0x20>)
 800022c:	f000 fc4d 	bl	8000aca <HAL_GPIO_WritePin>
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40011000 	.word	0x40011000

08000238 <xuly_led>:

void xuly_led()
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	switch (led_sta)
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <xuly_led+0x30>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b02      	cmp	r3, #2
 8000242:	d00c      	beq.n	800025e <xuly_led+0x26>
 8000244:	2b02      	cmp	r3, #2
 8000246:	dc0d      	bgt.n	8000264 <xuly_led+0x2c>
 8000248:	2b00      	cmp	r3, #0
 800024a:	d002      	beq.n	8000252 <xuly_led+0x1a>
 800024c:	2b01      	cmp	r3, #1
 800024e:	d003      	beq.n	8000258 <xuly_led+0x20>

		case led_blink_5Hz:
			xuly_led_blink5Hz();
			break;
	}
}
 8000250:	e008      	b.n	8000264 <xuly_led+0x2c>
			xuly_led_tat();
 8000252:	f7ff ffdf 	bl	8000214 <xuly_led_tat>
			break;
 8000256:	e005      	b.n	8000264 <xuly_led+0x2c>
			xuly_led_blink1Hz();
 8000258:	f7ff ffc0 	bl	80001dc <xuly_led_blink1Hz>
			break;
 800025c:	e002      	b.n	8000264 <xuly_led+0x2c>
			xuly_led_blink5Hz();
 800025e:	f7ff ffa3 	bl	80001a8 <xuly_led_blink5Hz>
			break;
 8000262:	bf00      	nop
}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000050 	.word	0x20000050

0800026c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000270:	f000 f94a 	bl	8000508 <HAL_Init>

  /* USER CODE BEGIN Init */
  nutnhan_init(&button1, GPIOA, GPIO_PIN_0);
 8000274:	2201      	movs	r2, #1
 8000276:	490b      	ldr	r1, [pc, #44]	; (80002a4 <main+0x38>)
 8000278:	480b      	ldr	r0, [pc, #44]	; (80002a8 <main+0x3c>)
 800027a:	f001 f88c 	bl	8001396 <nutnhan_init>
  nutnhan_init(&button2, GPIOA, GPIO_PIN_1);
 800027e:	2202      	movs	r2, #2
 8000280:	4908      	ldr	r1, [pc, #32]	; (80002a4 <main+0x38>)
 8000282:	480a      	ldr	r0, [pc, #40]	; (80002ac <main+0x40>)
 8000284:	f001 f887 	bl	8001396 <nutnhan_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f812 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800028c:	f000 f856 	bl	800033c <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		xulynutnhan(&button1);
 8000290:	4805      	ldr	r0, [pc, #20]	; (80002a8 <main+0x3c>)
 8000292:	f001 f82f 	bl	80012f4 <xulynutnhan>
		xulynutnhan(&button2);
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <main+0x40>)
 8000298:	f001 f82c 	bl	80012f4 <xulynutnhan>
		xuly_led();
 800029c:	f7ff ffcc 	bl	8000238 <xuly_led>
		xulynutnhan(&button1);
 80002a0:	e7f6      	b.n	8000290 <main+0x24>
 80002a2:	bf00      	nop
 80002a4:	40010800 	.word	0x40010800
 80002a8:	20000028 	.word	0x20000028
 80002ac:	2000003c 	.word	0x2000003c

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b090      	sub	sp, #64	; 0x40
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	f107 0318 	add.w	r3, r7, #24
 80002ba:	2228      	movs	r2, #40	; 0x28
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 f87b 	bl	80013ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
 80002ca:	605a      	str	r2, [r3, #4]
 80002cc:	609a      	str	r2, [r3, #8]
 80002ce:	60da      	str	r2, [r3, #12]
 80002d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002d2:	2301      	movs	r3, #1
 80002d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e0:	2301      	movs	r3, #1
 80002e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e4:	2302      	movs	r3, #2
 80002e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	f107 0318 	add.w	r3, r7, #24
 80002f8:	4618      	mov	r0, r3
 80002fa:	f000 fc17 	bl	8000b2c <HAL_RCC_OscConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000304:	f000 f874 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030c:	2302      	movs	r3, #2
 800030e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000314:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800031e:	1d3b      	adds	r3, r7, #4
 8000320:	2102      	movs	r1, #2
 8000322:	4618      	mov	r0, r3
 8000324:	f000 fe84 	bl	8001030 <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800032e:	f000 f85f 	bl	80003f0 <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3740      	adds	r7, #64	; 0x40
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b088      	sub	sp, #32
 8000340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	2200      	movs	r2, #0
 8000348:	601a      	str	r2, [r3, #0]
 800034a:	605a      	str	r2, [r3, #4]
 800034c:	609a      	str	r2, [r3, #8]
 800034e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000350:	4b24      	ldr	r3, [pc, #144]	; (80003e4 <MX_GPIO_Init+0xa8>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a23      	ldr	r2, [pc, #140]	; (80003e4 <MX_GPIO_Init+0xa8>)
 8000356:	f043 0310 	orr.w	r3, r3, #16
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b21      	ldr	r3, [pc, #132]	; (80003e4 <MX_GPIO_Init+0xa8>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0310 	and.w	r3, r3, #16
 8000364:	60fb      	str	r3, [r7, #12]
 8000366:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000368:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <MX_GPIO_Init+0xa8>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a1d      	ldr	r2, [pc, #116]	; (80003e4 <MX_GPIO_Init+0xa8>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <MX_GPIO_Init+0xa8>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0320 	and.w	r3, r3, #32
 800037c:	60bb      	str	r3, [r7, #8]
 800037e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <MX_GPIO_Init+0xa8>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a17      	ldr	r2, [pc, #92]	; (80003e4 <MX_GPIO_Init+0xa8>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <MX_GPIO_Init+0xa8>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0304 	and.w	r3, r3, #4
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800039e:	4812      	ldr	r0, [pc, #72]	; (80003e8 <MX_GPIO_Init+0xac>)
 80003a0:	f000 fb93 	bl	8000aca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80003a4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80003a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003aa:	2301      	movs	r3, #1
 80003ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003b2:	2302      	movs	r3, #2
 80003b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003b6:	f107 0310 	add.w	r3, r7, #16
 80003ba:	4619      	mov	r1, r3
 80003bc:	480a      	ldr	r0, [pc, #40]	; (80003e8 <MX_GPIO_Init+0xac>)
 80003be:	f000 f9e9 	bl	8000794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80003c2:	2302      	movs	r3, #2
 80003c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c6:	2300      	movs	r3, #0
 80003c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003ca:	2301      	movs	r3, #1
 80003cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	4619      	mov	r1, r3
 80003d4:	4805      	ldr	r0, [pc, #20]	; (80003ec <MX_GPIO_Init+0xb0>)
 80003d6:	f000 f9dd 	bl	8000794 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003da:	bf00      	nop
 80003dc:	3720      	adds	r7, #32
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40011000 	.word	0x40011000
 80003ec:	40010800 	.word	0x40010800

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <Error_Handler+0x8>
	...

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000402:	4b15      	ldr	r3, [pc, #84]	; (8000458 <HAL_MspInit+0x5c>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	4a14      	ldr	r2, [pc, #80]	; (8000458 <HAL_MspInit+0x5c>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6193      	str	r3, [r2, #24]
 800040e:	4b12      	ldr	r3, [pc, #72]	; (8000458 <HAL_MspInit+0x5c>)
 8000410:	699b      	ldr	r3, [r3, #24]
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b0f      	ldr	r3, [pc, #60]	; (8000458 <HAL_MspInit+0x5c>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	4a0e      	ldr	r2, [pc, #56]	; (8000458 <HAL_MspInit+0x5c>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000424:	61d3      	str	r3, [r2, #28]
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_MspInit+0x5c>)
 8000428:	69db      	ldr	r3, [r3, #28]
 800042a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <HAL_MspInit+0x60>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	60fb      	str	r3, [r7, #12]
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800043e:	60fb      	str	r3, [r7, #12]
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000446:	60fb      	str	r3, [r7, #12]
 8000448:	4a04      	ldr	r2, [pc, #16]	; (800045c <HAL_MspInit+0x60>)
 800044a:	68fb      	ldr	r3, [r7, #12]
 800044c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800044e:	bf00      	nop
 8000450:	3714      	adds	r7, #20
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr
 8000458:	40021000 	.word	0x40021000
 800045c:	40010000 	.word	0x40010000

08000460 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000464:	e7fe      	b.n	8000464 <NMI_Handler+0x4>

08000466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000466:	b480      	push	{r7}
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800046a:	e7fe      	b.n	800046a <HardFault_Handler+0x4>

0800046c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000470:	e7fe      	b.n	8000470 <MemManage_Handler+0x4>

08000472 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000472:	b480      	push	{r7}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000476:	e7fe      	b.n	8000476 <BusFault_Handler+0x4>

08000478 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800047c:	e7fe      	b.n	800047c <UsageFault_Handler+0x4>

0800047e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr

0800048a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800048e:	bf00      	nop
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr

08000496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800049a:	bf00      	nop
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr

080004a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004a2:	b580      	push	{r7, lr}
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a6:	f000 f875 	bl	8000594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}

080004ae <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b2:	bf00      	nop
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
	...

080004bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004bc:	f7ff fff7 	bl	80004ae <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004c0:	480b      	ldr	r0, [pc, #44]	; (80004f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004c2:	490c      	ldr	r1, [pc, #48]	; (80004f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004c4:	4a0c      	ldr	r2, [pc, #48]	; (80004f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c8:	e002      	b.n	80004d0 <LoopCopyDataInit>

080004ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ce:	3304      	adds	r3, #4

080004d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d4:	d3f9      	bcc.n	80004ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d6:	4a09      	ldr	r2, [pc, #36]	; (80004fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80004d8:	4c09      	ldr	r4, [pc, #36]	; (8000500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004dc:	e001      	b.n	80004e2 <LoopFillZerobss>

080004de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e0:	3204      	adds	r2, #4

080004e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e4:	d3fb      	bcc.n	80004de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80004e6:	f000 ff71 	bl	80013cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004ea:	f7ff febf 	bl	800026c <main>
  bx lr
 80004ee:	4770      	bx	lr
  ldr r0, =_sdata
 80004f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004f8:	08001458 	.word	0x08001458
  ldr r2, =_sbss
 80004fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000500:	20000060 	.word	0x20000060

08000504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000504:	e7fe      	b.n	8000504 <ADC1_2_IRQHandler>
	...

08000508 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <HAL_Init+0x28>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <HAL_Init+0x28>)
 8000512:	f043 0310 	orr.w	r3, r3, #16
 8000516:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 f907 	bl	800072c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051e:	200f      	movs	r0, #15
 8000520:	f000 f808 	bl	8000534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000524:	f7ff ff6a 	bl	80003fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000528:	2300      	movs	r3, #0
}
 800052a:	4618      	mov	r0, r3
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40022000 	.word	0x40022000

08000534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x54>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b12      	ldr	r3, [pc, #72]	; (800058c <HAL_InitTick+0x58>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054a:	fbb3 f3f1 	udiv	r3, r3, r1
 800054e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f911 	bl	800077a <HAL_SYSTICK_Config>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055e:	2301      	movs	r3, #1
 8000560:	e00e      	b.n	8000580 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b0f      	cmp	r3, #15
 8000566:	d80a      	bhi.n	800057e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000568:	2200      	movs	r2, #0
 800056a:	6879      	ldr	r1, [r7, #4]
 800056c:	f04f 30ff 	mov.w	r0, #4294967295
 8000570:	f000 f8e7 	bl	8000742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000574:	4a06      	ldr	r2, [pc, #24]	; (8000590 <HAL_InitTick+0x5c>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800057a:	2300      	movs	r3, #0
 800057c:	e000      	b.n	8000580 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
}
 8000580:	4618      	mov	r0, r3
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000000 	.word	0x20000000
 800058c:	20000008 	.word	0x20000008
 8000590:	20000004 	.word	0x20000004

08000594 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <HAL_IncTick+0x1c>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	461a      	mov	r2, r3
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <HAL_IncTick+0x20>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4413      	add	r3, r2
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <HAL_IncTick+0x20>)
 80005a6:	6013      	str	r3, [r2, #0]
}
 80005a8:	bf00      	nop
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr
 80005b0:	20000008 	.word	0x20000008
 80005b4:	2000005c 	.word	0x2000005c

080005b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b02      	ldr	r3, [pc, #8]	; (80005c8 <HAL_GetTick+0x10>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	2000005c 	.word	0x2000005c

080005cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f003 0307 	and.w	r3, r3, #7
 80005da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 80005de:	68db      	ldr	r3, [r3, #12]
 80005e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e2:	68ba      	ldr	r2, [r7, #8]
 80005e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005e8:	4013      	ands	r3, r2
 80005ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005fe:	4a04      	ldr	r2, [pc, #16]	; (8000610 <__NVIC_SetPriorityGrouping+0x44>)
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	60d3      	str	r3, [r2, #12]
}
 8000604:	bf00      	nop
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000618:	4b04      	ldr	r3, [pc, #16]	; (800062c <__NVIC_GetPriorityGrouping+0x18>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	0a1b      	lsrs	r3, r3, #8
 800061e:	f003 0307 	and.w	r3, r3, #7
}
 8000622:	4618      	mov	r0, r3
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	6039      	str	r1, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800063c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000640:	2b00      	cmp	r3, #0
 8000642:	db0a      	blt.n	800065a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	b2da      	uxtb	r2, r3
 8000648:	490c      	ldr	r1, [pc, #48]	; (800067c <__NVIC_SetPriority+0x4c>)
 800064a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800064e:	0112      	lsls	r2, r2, #4
 8000650:	b2d2      	uxtb	r2, r2
 8000652:	440b      	add	r3, r1
 8000654:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000658:	e00a      	b.n	8000670 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	b2da      	uxtb	r2, r3
 800065e:	4908      	ldr	r1, [pc, #32]	; (8000680 <__NVIC_SetPriority+0x50>)
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f003 030f 	and.w	r3, r3, #15
 8000666:	3b04      	subs	r3, #4
 8000668:	0112      	lsls	r2, r2, #4
 800066a:	b2d2      	uxtb	r2, r2
 800066c:	440b      	add	r3, r1
 800066e:	761a      	strb	r2, [r3, #24]
}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	e000e100 	.word	0xe000e100
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000684:	b480      	push	{r7}
 8000686:	b089      	sub	sp, #36	; 0x24
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000698:	69fb      	ldr	r3, [r7, #28]
 800069a:	f1c3 0307 	rsb	r3, r3, #7
 800069e:	2b04      	cmp	r3, #4
 80006a0:	bf28      	it	cs
 80006a2:	2304      	movcs	r3, #4
 80006a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	3304      	adds	r3, #4
 80006aa:	2b06      	cmp	r3, #6
 80006ac:	d902      	bls.n	80006b4 <NVIC_EncodePriority+0x30>
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	3b03      	subs	r3, #3
 80006b2:	e000      	b.n	80006b6 <NVIC_EncodePriority+0x32>
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b8:	f04f 32ff 	mov.w	r2, #4294967295
 80006bc:	69bb      	ldr	r3, [r7, #24]
 80006be:	fa02 f303 	lsl.w	r3, r2, r3
 80006c2:	43da      	mvns	r2, r3
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	401a      	ands	r2, r3
 80006c8:	697b      	ldr	r3, [r7, #20]
 80006ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006cc:	f04f 31ff 	mov.w	r1, #4294967295
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	fa01 f303 	lsl.w	r3, r1, r3
 80006d6:	43d9      	mvns	r1, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006dc:	4313      	orrs	r3, r2
         );
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3724      	adds	r7, #36	; 0x24
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006f8:	d301      	bcc.n	80006fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00f      	b.n	800071e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006fe:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <SysTick_Config+0x40>)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3b01      	subs	r3, #1
 8000704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000706:	210f      	movs	r1, #15
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f7ff ff90 	bl	8000630 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <SysTick_Config+0x40>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000716:	4b04      	ldr	r3, [pc, #16]	; (8000728 <SysTick_Config+0x40>)
 8000718:	2207      	movs	r2, #7
 800071a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	e000e010 	.word	0xe000e010

0800072c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff ff49 	bl	80005cc <__NVIC_SetPriorityGrouping>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000742:	b580      	push	{r7, lr}
 8000744:	b086      	sub	sp, #24
 8000746:	af00      	add	r7, sp, #0
 8000748:	4603      	mov	r3, r0
 800074a:	60b9      	str	r1, [r7, #8]
 800074c:	607a      	str	r2, [r7, #4]
 800074e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000754:	f7ff ff5e 	bl	8000614 <__NVIC_GetPriorityGrouping>
 8000758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	68b9      	ldr	r1, [r7, #8]
 800075e:	6978      	ldr	r0, [r7, #20]
 8000760:	f7ff ff90 	bl	8000684 <NVIC_EncodePriority>
 8000764:	4602      	mov	r2, r0
 8000766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff5f 	bl	8000630 <__NVIC_SetPriority>
}
 8000772:	bf00      	nop
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff ffb0 	bl	80006e8 <SysTick_Config>
 8000788:	4603      	mov	r3, r0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
	...

08000794 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000794:	b480      	push	{r7}
 8000796:	b08b      	sub	sp, #44	; 0x2c
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007a6:	e169      	b.n	8000a7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007a8:	2201      	movs	r2, #1
 80007aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ac:	fa02 f303 	lsl.w	r3, r2, r3
 80007b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	69fa      	ldr	r2, [r7, #28]
 80007b8:	4013      	ands	r3, r2
 80007ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007bc:	69ba      	ldr	r2, [r7, #24]
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	f040 8158 	bne.w	8000a76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	4a9a      	ldr	r2, [pc, #616]	; (8000a34 <HAL_GPIO_Init+0x2a0>)
 80007cc:	4293      	cmp	r3, r2
 80007ce:	d05e      	beq.n	800088e <HAL_GPIO_Init+0xfa>
 80007d0:	4a98      	ldr	r2, [pc, #608]	; (8000a34 <HAL_GPIO_Init+0x2a0>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d875      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 80007d6:	4a98      	ldr	r2, [pc, #608]	; (8000a38 <HAL_GPIO_Init+0x2a4>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d058      	beq.n	800088e <HAL_GPIO_Init+0xfa>
 80007dc:	4a96      	ldr	r2, [pc, #600]	; (8000a38 <HAL_GPIO_Init+0x2a4>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d86f      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 80007e2:	4a96      	ldr	r2, [pc, #600]	; (8000a3c <HAL_GPIO_Init+0x2a8>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d052      	beq.n	800088e <HAL_GPIO_Init+0xfa>
 80007e8:	4a94      	ldr	r2, [pc, #592]	; (8000a3c <HAL_GPIO_Init+0x2a8>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d869      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 80007ee:	4a94      	ldr	r2, [pc, #592]	; (8000a40 <HAL_GPIO_Init+0x2ac>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	d04c      	beq.n	800088e <HAL_GPIO_Init+0xfa>
 80007f4:	4a92      	ldr	r2, [pc, #584]	; (8000a40 <HAL_GPIO_Init+0x2ac>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d863      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 80007fa:	4a92      	ldr	r2, [pc, #584]	; (8000a44 <HAL_GPIO_Init+0x2b0>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d046      	beq.n	800088e <HAL_GPIO_Init+0xfa>
 8000800:	4a90      	ldr	r2, [pc, #576]	; (8000a44 <HAL_GPIO_Init+0x2b0>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d85d      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 8000806:	2b12      	cmp	r3, #18
 8000808:	d82a      	bhi.n	8000860 <HAL_GPIO_Init+0xcc>
 800080a:	2b12      	cmp	r3, #18
 800080c:	d859      	bhi.n	80008c2 <HAL_GPIO_Init+0x12e>
 800080e:	a201      	add	r2, pc, #4	; (adr r2, 8000814 <HAL_GPIO_Init+0x80>)
 8000810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000814:	0800088f 	.word	0x0800088f
 8000818:	08000869 	.word	0x08000869
 800081c:	0800087b 	.word	0x0800087b
 8000820:	080008bd 	.word	0x080008bd
 8000824:	080008c3 	.word	0x080008c3
 8000828:	080008c3 	.word	0x080008c3
 800082c:	080008c3 	.word	0x080008c3
 8000830:	080008c3 	.word	0x080008c3
 8000834:	080008c3 	.word	0x080008c3
 8000838:	080008c3 	.word	0x080008c3
 800083c:	080008c3 	.word	0x080008c3
 8000840:	080008c3 	.word	0x080008c3
 8000844:	080008c3 	.word	0x080008c3
 8000848:	080008c3 	.word	0x080008c3
 800084c:	080008c3 	.word	0x080008c3
 8000850:	080008c3 	.word	0x080008c3
 8000854:	080008c3 	.word	0x080008c3
 8000858:	08000871 	.word	0x08000871
 800085c:	08000885 	.word	0x08000885
 8000860:	4a79      	ldr	r2, [pc, #484]	; (8000a48 <HAL_GPIO_Init+0x2b4>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d013      	beq.n	800088e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000866:	e02c      	b.n	80008c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	623b      	str	r3, [r7, #32]
          break;
 800086e:	e029      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	3304      	adds	r3, #4
 8000876:	623b      	str	r3, [r7, #32]
          break;
 8000878:	e024      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	3308      	adds	r3, #8
 8000880:	623b      	str	r3, [r7, #32]
          break;
 8000882:	e01f      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	330c      	adds	r3, #12
 800088a:	623b      	str	r3, [r7, #32]
          break;
 800088c:	e01a      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d102      	bne.n	800089c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000896:	2304      	movs	r3, #4
 8000898:	623b      	str	r3, [r7, #32]
          break;
 800089a:	e013      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	689b      	ldr	r3, [r3, #8]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d105      	bne.n	80008b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008a4:	2308      	movs	r3, #8
 80008a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	69fa      	ldr	r2, [r7, #28]
 80008ac:	611a      	str	r2, [r3, #16]
          break;
 80008ae:	e009      	b.n	80008c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008b0:	2308      	movs	r3, #8
 80008b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69fa      	ldr	r2, [r7, #28]
 80008b8:	615a      	str	r2, [r3, #20]
          break;
 80008ba:	e003      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
          break;
 80008c0:	e000      	b.n	80008c4 <HAL_GPIO_Init+0x130>
          break;
 80008c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	2bff      	cmp	r3, #255	; 0xff
 80008c8:	d801      	bhi.n	80008ce <HAL_GPIO_Init+0x13a>
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	e001      	b.n	80008d2 <HAL_GPIO_Init+0x13e>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	3304      	adds	r3, #4
 80008d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	2bff      	cmp	r3, #255	; 0xff
 80008d8:	d802      	bhi.n	80008e0 <HAL_GPIO_Init+0x14c>
 80008da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	e002      	b.n	80008e6 <HAL_GPIO_Init+0x152>
 80008e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e2:	3b08      	subs	r3, #8
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	210f      	movs	r1, #15
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	fa01 f303 	lsl.w	r3, r1, r3
 80008f4:	43db      	mvns	r3, r3
 80008f6:	401a      	ands	r2, r3
 80008f8:	6a39      	ldr	r1, [r7, #32]
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000900:	431a      	orrs	r2, r3
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090e:	2b00      	cmp	r3, #0
 8000910:	f000 80b1 	beq.w	8000a76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000914:	4b4d      	ldr	r3, [pc, #308]	; (8000a4c <HAL_GPIO_Init+0x2b8>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a4c      	ldr	r2, [pc, #304]	; (8000a4c <HAL_GPIO_Init+0x2b8>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b4a      	ldr	r3, [pc, #296]	; (8000a4c <HAL_GPIO_Init+0x2b8>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0301 	and.w	r3, r3, #1
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800092c:	4a48      	ldr	r2, [pc, #288]	; (8000a50 <HAL_GPIO_Init+0x2bc>)
 800092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000930:	089b      	lsrs	r3, r3, #2
 8000932:	3302      	adds	r3, #2
 8000934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000938:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093c:	f003 0303 	and.w	r3, r3, #3
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	220f      	movs	r2, #15
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	4013      	ands	r3, r2
 800094e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4a40      	ldr	r2, [pc, #256]	; (8000a54 <HAL_GPIO_Init+0x2c0>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d013      	beq.n	8000980 <HAL_GPIO_Init+0x1ec>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a3f      	ldr	r2, [pc, #252]	; (8000a58 <HAL_GPIO_Init+0x2c4>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d00d      	beq.n	800097c <HAL_GPIO_Init+0x1e8>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	4a3e      	ldr	r2, [pc, #248]	; (8000a5c <HAL_GPIO_Init+0x2c8>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d007      	beq.n	8000978 <HAL_GPIO_Init+0x1e4>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a3d      	ldr	r2, [pc, #244]	; (8000a60 <HAL_GPIO_Init+0x2cc>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d101      	bne.n	8000974 <HAL_GPIO_Init+0x1e0>
 8000970:	2303      	movs	r3, #3
 8000972:	e006      	b.n	8000982 <HAL_GPIO_Init+0x1ee>
 8000974:	2304      	movs	r3, #4
 8000976:	e004      	b.n	8000982 <HAL_GPIO_Init+0x1ee>
 8000978:	2302      	movs	r3, #2
 800097a:	e002      	b.n	8000982 <HAL_GPIO_Init+0x1ee>
 800097c:	2301      	movs	r3, #1
 800097e:	e000      	b.n	8000982 <HAL_GPIO_Init+0x1ee>
 8000980:	2300      	movs	r3, #0
 8000982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000984:	f002 0203 	and.w	r2, r2, #3
 8000988:	0092      	lsls	r2, r2, #2
 800098a:	4093      	lsls	r3, r2
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	4313      	orrs	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000992:	492f      	ldr	r1, [pc, #188]	; (8000a50 <HAL_GPIO_Init+0x2bc>)
 8000994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000996:	089b      	lsrs	r3, r3, #2
 8000998:	3302      	adds	r3, #2
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d006      	beq.n	80009ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80009ac:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009ae:	689a      	ldr	r2, [r3, #8]
 80009b0:	492c      	ldr	r1, [pc, #176]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	608b      	str	r3, [r1, #8]
 80009b8:	e006      	b.n	80009c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009bc:	689a      	ldr	r2, [r3, #8]
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	43db      	mvns	r3, r3
 80009c2:	4928      	ldr	r1, [pc, #160]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009c4:	4013      	ands	r3, r2
 80009c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d006      	beq.n	80009e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009d4:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009d6:	68da      	ldr	r2, [r3, #12]
 80009d8:	4922      	ldr	r1, [pc, #136]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	4313      	orrs	r3, r2
 80009de:	60cb      	str	r3, [r1, #12]
 80009e0:	e006      	b.n	80009f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009e2:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009e4:	68da      	ldr	r2, [r3, #12]
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	43db      	mvns	r3, r3
 80009ea:	491e      	ldr	r1, [pc, #120]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009ec:	4013      	ands	r3, r2
 80009ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d006      	beq.n	8000a0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 80009fe:	685a      	ldr	r2, [r3, #4]
 8000a00:	4918      	ldr	r1, [pc, #96]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 8000a02:	69bb      	ldr	r3, [r7, #24]
 8000a04:	4313      	orrs	r3, r2
 8000a06:	604b      	str	r3, [r1, #4]
 8000a08:	e006      	b.n	8000a18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	69bb      	ldr	r3, [r7, #24]
 8000a10:	43db      	mvns	r3, r3
 8000a12:	4914      	ldr	r1, [pc, #80]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 8000a14:	4013      	ands	r3, r2
 8000a16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d021      	beq.n	8000a68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	490e      	ldr	r1, [pc, #56]	; (8000a64 <HAL_GPIO_Init+0x2d0>)
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	600b      	str	r3, [r1, #0]
 8000a30:	e021      	b.n	8000a76 <HAL_GPIO_Init+0x2e2>
 8000a32:	bf00      	nop
 8000a34:	10320000 	.word	0x10320000
 8000a38:	10310000 	.word	0x10310000
 8000a3c:	10220000 	.word	0x10220000
 8000a40:	10210000 	.word	0x10210000
 8000a44:	10120000 	.word	0x10120000
 8000a48:	10110000 	.word	0x10110000
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40010000 	.word	0x40010000
 8000a54:	40010800 	.word	0x40010800
 8000a58:	40010c00 	.word	0x40010c00
 8000a5c:	40011000 	.word	0x40011000
 8000a60:	40011400 	.word	0x40011400
 8000a64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_GPIO_Init+0x304>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	4909      	ldr	r1, [pc, #36]	; (8000a98 <HAL_GPIO_Init+0x304>)
 8000a72:	4013      	ands	r3, r2
 8000a74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	3301      	adds	r3, #1
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	fa22 f303 	lsr.w	r3, r2, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f47f ae8e 	bne.w	80007a8 <HAL_GPIO_Init+0x14>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	bf00      	nop
 8000a90:	372c      	adds	r7, #44	; 0x2c
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	40010400 	.word	0x40010400

08000a9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	689a      	ldr	r2, [r3, #8]
 8000aac:	887b      	ldrh	r3, [r7, #2]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d002      	beq.n	8000aba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	73fb      	strb	r3, [r7, #15]
 8000ab8:	e001      	b.n	8000abe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr

08000aca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000aca:	b480      	push	{r7}
 8000acc:	b083      	sub	sp, #12
 8000ace:	af00      	add	r7, sp, #0
 8000ad0:	6078      	str	r0, [r7, #4]
 8000ad2:	460b      	mov	r3, r1
 8000ad4:	807b      	strh	r3, [r7, #2]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ada:	787b      	ldrb	r3, [r7, #1]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ae0:	887a      	ldrh	r2, [r7, #2]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ae6:	e003      	b.n	8000af0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ae8:	887b      	ldrh	r3, [r7, #2]
 8000aea:	041a      	lsls	r2, r3, #16
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	611a      	str	r2, [r3, #16]
}
 8000af0:	bf00      	nop
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr

08000afa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b085      	sub	sp, #20
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
 8000b02:	460b      	mov	r3, r1
 8000b04:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b0c:	887a      	ldrh	r2, [r7, #2]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4013      	ands	r3, r2
 8000b12:	041a      	lsls	r2, r3, #16
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	400b      	ands	r3, r1
 8000b1c:	431a      	orrs	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	611a      	str	r2, [r3, #16]
}
 8000b22:	bf00      	nop
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b086      	sub	sp, #24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d101      	bne.n	8000b3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e272      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 8087 	beq.w	8000c5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b4c:	4b92      	ldr	r3, [pc, #584]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 030c 	and.w	r3, r3, #12
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	d00c      	beq.n	8000b72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b58:	4b8f      	ldr	r3, [pc, #572]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f003 030c 	and.w	r3, r3, #12
 8000b60:	2b08      	cmp	r3, #8
 8000b62:	d112      	bne.n	8000b8a <HAL_RCC_OscConfig+0x5e>
 8000b64:	4b8c      	ldr	r3, [pc, #560]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b70:	d10b      	bne.n	8000b8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b72:	4b89      	ldr	r3, [pc, #548]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d06c      	beq.n	8000c58 <HAL_RCC_OscConfig+0x12c>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d168      	bne.n	8000c58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
 8000b88:	e24c      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b92:	d106      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x76>
 8000b94:	4b80      	ldr	r3, [pc, #512]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a7f      	ldr	r2, [pc, #508]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	e02e      	b.n	8000c00 <HAL_RCC_OscConfig+0xd4>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d10c      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x98>
 8000baa:	4b7b      	ldr	r3, [pc, #492]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a7a      	ldr	r2, [pc, #488]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	4b78      	ldr	r3, [pc, #480]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a77      	ldr	r2, [pc, #476]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc0:	6013      	str	r3, [r2, #0]
 8000bc2:	e01d      	b.n	8000c00 <HAL_RCC_OscConfig+0xd4>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bcc:	d10c      	bne.n	8000be8 <HAL_RCC_OscConfig+0xbc>
 8000bce:	4b72      	ldr	r3, [pc, #456]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a71      	ldr	r2, [pc, #452]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	4b6f      	ldr	r3, [pc, #444]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a6e      	ldr	r2, [pc, #440]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e00b      	b.n	8000c00 <HAL_RCC_OscConfig+0xd4>
 8000be8:	4b6b      	ldr	r3, [pc, #428]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a6a      	ldr	r2, [pc, #424]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	4b68      	ldr	r3, [pc, #416]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a67      	ldr	r2, [pc, #412]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d013      	beq.n	8000c30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c08:	f7ff fcd6 	bl	80005b8 <HAL_GetTick>
 8000c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c0e:	e008      	b.n	8000c22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c10:	f7ff fcd2 	bl	80005b8 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	2b64      	cmp	r3, #100	; 0x64
 8000c1c:	d901      	bls.n	8000c22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	e200      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c22:	4b5d      	ldr	r3, [pc, #372]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0f0      	beq.n	8000c10 <HAL_RCC_OscConfig+0xe4>
 8000c2e:	e014      	b.n	8000c5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c30:	f7ff fcc2 	bl	80005b8 <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c38:	f7ff fcbe 	bl	80005b8 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b64      	cmp	r3, #100	; 0x64
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e1ec      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c4a:	4b53      	ldr	r3, [pc, #332]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f0      	bne.n	8000c38 <HAL_RCC_OscConfig+0x10c>
 8000c56:	e000      	b.n	8000c5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d063      	beq.n	8000d2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c66:	4b4c      	ldr	r3, [pc, #304]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 030c 	and.w	r3, r3, #12
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00b      	beq.n	8000c8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c72:	4b49      	ldr	r3, [pc, #292]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f003 030c 	and.w	r3, r3, #12
 8000c7a:	2b08      	cmp	r3, #8
 8000c7c:	d11c      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x18c>
 8000c7e:	4b46      	ldr	r3, [pc, #280]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d116      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c8a:	4b43      	ldr	r3, [pc, #268]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d005      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x176>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d001      	beq.n	8000ca2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e1c0      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca2:	4b3d      	ldr	r3, [pc, #244]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	00db      	lsls	r3, r3, #3
 8000cb0:	4939      	ldr	r1, [pc, #228]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb6:	e03a      	b.n	8000d2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	691b      	ldr	r3, [r3, #16]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d020      	beq.n	8000d02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cc0:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <HAL_RCC_OscConfig+0x270>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc6:	f7ff fc77 	bl	80005b8 <HAL_GetTick>
 8000cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ccc:	e008      	b.n	8000ce0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cce:	f7ff fc73 	bl	80005b8 <HAL_GetTick>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d901      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e1a1      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce0:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 0302 	and.w	r3, r3, #2
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f0      	beq.n	8000cce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cec:	4b2a      	ldr	r3, [pc, #168]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	695b      	ldr	r3, [r3, #20]
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	4927      	ldr	r1, [pc, #156]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	600b      	str	r3, [r1, #0]
 8000d00:	e015      	b.n	8000d2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d02:	4b26      	ldr	r3, [pc, #152]	; (8000d9c <HAL_RCC_OscConfig+0x270>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fc56 	bl	80005b8 <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d10:	f7ff fc52 	bl	80005b8 <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e180      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d22:	4b1d      	ldr	r3, [pc, #116]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1f0      	bne.n	8000d10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0308 	and.w	r3, r3, #8
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d03a      	beq.n	8000db0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d019      	beq.n	8000d76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_RCC_OscConfig+0x274>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d48:	f7ff fc36 	bl	80005b8 <HAL_GetTick>
 8000d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d4e:	e008      	b.n	8000d62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d50:	f7ff fc32 	bl	80005b8 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e160      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d62:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0f0      	beq.n	8000d50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f000 fa9c 	bl	80012ac <RCC_Delay>
 8000d74:	e01c      	b.n	8000db0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_RCC_OscConfig+0x274>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d7c:	f7ff fc1c 	bl	80005b8 <HAL_GetTick>
 8000d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d82:	e00f      	b.n	8000da4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d84:	f7ff fc18 	bl	80005b8 <HAL_GetTick>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	1ad3      	subs	r3, r2, r3
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d908      	bls.n	8000da4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d92:	2303      	movs	r3, #3
 8000d94:	e146      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	42420000 	.word	0x42420000
 8000da0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da4:	4b92      	ldr	r3, [pc, #584]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1e9      	bne.n	8000d84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	f000 80a6 	beq.w	8000f0a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dc2:	4b8b      	ldr	r3, [pc, #556]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10d      	bne.n	8000dea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dce:	4b88      	ldr	r3, [pc, #544]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	4a87      	ldr	r2, [pc, #540]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd8:	61d3      	str	r3, [r2, #28]
 8000dda:	4b85      	ldr	r3, [pc, #532]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000ddc:	69db      	ldr	r3, [r3, #28]
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de2:	60bb      	str	r3, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000de6:	2301      	movs	r3, #1
 8000de8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dea:	4b82      	ldr	r3, [pc, #520]	; (8000ff4 <HAL_RCC_OscConfig+0x4c8>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d118      	bne.n	8000e28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000df6:	4b7f      	ldr	r3, [pc, #508]	; (8000ff4 <HAL_RCC_OscConfig+0x4c8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a7e      	ldr	r2, [pc, #504]	; (8000ff4 <HAL_RCC_OscConfig+0x4c8>)
 8000dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e02:	f7ff fbd9 	bl	80005b8 <HAL_GetTick>
 8000e06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e08:	e008      	b.n	8000e1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e0a:	f7ff fbd5 	bl	80005b8 <HAL_GetTick>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	2b64      	cmp	r3, #100	; 0x64
 8000e16:	d901      	bls.n	8000e1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e103      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e1c:	4b75      	ldr	r3, [pc, #468]	; (8000ff4 <HAL_RCC_OscConfig+0x4c8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f0      	beq.n	8000e0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d106      	bne.n	8000e3e <HAL_RCC_OscConfig+0x312>
 8000e30:	4b6f      	ldr	r3, [pc, #444]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e32:	6a1b      	ldr	r3, [r3, #32]
 8000e34:	4a6e      	ldr	r2, [pc, #440]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6213      	str	r3, [r2, #32]
 8000e3c:	e02d      	b.n	8000e9a <HAL_RCC_OscConfig+0x36e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10c      	bne.n	8000e60 <HAL_RCC_OscConfig+0x334>
 8000e46:	4b6a      	ldr	r3, [pc, #424]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e48:	6a1b      	ldr	r3, [r3, #32]
 8000e4a:	4a69      	ldr	r2, [pc, #420]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e4c:	f023 0301 	bic.w	r3, r3, #1
 8000e50:	6213      	str	r3, [r2, #32]
 8000e52:	4b67      	ldr	r3, [pc, #412]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e54:	6a1b      	ldr	r3, [r3, #32]
 8000e56:	4a66      	ldr	r2, [pc, #408]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e58:	f023 0304 	bic.w	r3, r3, #4
 8000e5c:	6213      	str	r3, [r2, #32]
 8000e5e:	e01c      	b.n	8000e9a <HAL_RCC_OscConfig+0x36e>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d10c      	bne.n	8000e82 <HAL_RCC_OscConfig+0x356>
 8000e68:	4b61      	ldr	r3, [pc, #388]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	4a60      	ldr	r2, [pc, #384]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e6e:	f043 0304 	orr.w	r3, r3, #4
 8000e72:	6213      	str	r3, [r2, #32]
 8000e74:	4b5e      	ldr	r3, [pc, #376]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e76:	6a1b      	ldr	r3, [r3, #32]
 8000e78:	4a5d      	ldr	r2, [pc, #372]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	6213      	str	r3, [r2, #32]
 8000e80:	e00b      	b.n	8000e9a <HAL_RCC_OscConfig+0x36e>
 8000e82:	4b5b      	ldr	r3, [pc, #364]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	4a5a      	ldr	r2, [pc, #360]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e88:	f023 0301 	bic.w	r3, r3, #1
 8000e8c:	6213      	str	r3, [r2, #32]
 8000e8e:	4b58      	ldr	r3, [pc, #352]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e90:	6a1b      	ldr	r3, [r3, #32]
 8000e92:	4a57      	ldr	r2, [pc, #348]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000e94:	f023 0304 	bic.w	r3, r3, #4
 8000e98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d015      	beq.n	8000ece <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fb89 	bl	80005b8 <HAL_GetTick>
 8000ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea8:	e00a      	b.n	8000ec0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eaa:	f7ff fb85 	bl	80005b8 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e0b1      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec0:	4b4b      	ldr	r3, [pc, #300]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d0ee      	beq.n	8000eaa <HAL_RCC_OscConfig+0x37e>
 8000ecc:	e014      	b.n	8000ef8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ece:	f7ff fb73 	bl	80005b8 <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed4:	e00a      	b.n	8000eec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ed6:	f7ff fb6f 	bl	80005b8 <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d901      	bls.n	8000eec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e09b      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eec:	4b40      	ldr	r3, [pc, #256]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1ee      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ef8:	7dfb      	ldrb	r3, [r7, #23]
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d105      	bne.n	8000f0a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000efe:	4b3c      	ldr	r3, [pc, #240]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	4a3b      	ldr	r2, [pc, #236]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f08:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f000 8087 	beq.w	8001022 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f14:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d061      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69db      	ldr	r3, [r3, #28]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d146      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f28:	4b33      	ldr	r3, [pc, #204]	; (8000ff8 <HAL_RCC_OscConfig+0x4cc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2e:	f7ff fb43 	bl	80005b8 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f36:	f7ff fb3f 	bl	80005b8 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e06d      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f48:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1f0      	bne.n	8000f36 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f5c:	d108      	bne.n	8000f70 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f5e:	4b24      	ldr	r3, [pc, #144]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	4921      	ldr	r1, [pc, #132]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f70:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a19      	ldr	r1, [r3, #32]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f80:	430b      	orrs	r3, r1
 8000f82:	491b      	ldr	r1, [pc, #108]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000f84:	4313      	orrs	r3, r2
 8000f86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_RCC_OscConfig+0x4cc>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8e:	f7ff fb13 	bl	80005b8 <HAL_GetTick>
 8000f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f96:	f7ff fb0f 	bl	80005b8 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e03d      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0f0      	beq.n	8000f96 <HAL_RCC_OscConfig+0x46a>
 8000fb4:	e035      	b.n	8001022 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <HAL_RCC_OscConfig+0x4cc>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fafc 	bl	80005b8 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc4:	f7ff faf8 	bl	80005b8 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e026      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_RCC_OscConfig+0x4c4>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f0      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x498>
 8000fe2:	e01e      	b.n	8001022 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69db      	ldr	r3, [r3, #28]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d107      	bne.n	8000ffc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e019      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40007000 	.word	0x40007000
 8000ff8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <HAL_RCC_OscConfig+0x500>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	429a      	cmp	r2, r3
 800100e:	d106      	bne.n	800101e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800101a:	429a      	cmp	r2, r3
 800101c:	d001      	beq.n	8001022 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40021000 	.word	0x40021000

08001030 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d101      	bne.n	8001044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e0d0      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001044:	4b6a      	ldr	r3, [pc, #424]	; (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0307 	and.w	r3, r3, #7
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	429a      	cmp	r2, r3
 8001050:	d910      	bls.n	8001074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001052:	4b67      	ldr	r3, [pc, #412]	; (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f023 0207 	bic.w	r2, r3, #7
 800105a:	4965      	ldr	r1, [pc, #404]	; (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	4313      	orrs	r3, r2
 8001060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001062:	4b63      	ldr	r3, [pc, #396]	; (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	683a      	ldr	r2, [r7, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d001      	beq.n	8001074 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e0b8      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	2b00      	cmp	r3, #0
 800107e:	d020      	beq.n	80010c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f003 0304 	and.w	r3, r3, #4
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800108c:	4b59      	ldr	r3, [pc, #356]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4a58      	ldr	r2, [pc, #352]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001092:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001096:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d005      	beq.n	80010b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010a4:	4b53      	ldr	r3, [pc, #332]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	4a52      	ldr	r2, [pc, #328]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010b0:	4b50      	ldr	r3, [pc, #320]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	494d      	ldr	r1, [pc, #308]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d040      	beq.n	8001150 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d107      	bne.n	80010e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	4b47      	ldr	r3, [pc, #284]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d115      	bne.n	800110e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e07f      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d107      	bne.n	80010fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ee:	4b41      	ldr	r3, [pc, #260]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d109      	bne.n	800110e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e073      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010fe:	4b3d      	ldr	r3, [pc, #244]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0302 	and.w	r3, r3, #2
 8001106:	2b00      	cmp	r3, #0
 8001108:	d101      	bne.n	800110e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e06b      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800110e:	4b39      	ldr	r3, [pc, #228]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f023 0203 	bic.w	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	4936      	ldr	r1, [pc, #216]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 800111c:	4313      	orrs	r3, r2
 800111e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001120:	f7ff fa4a 	bl	80005b8 <HAL_GetTick>
 8001124:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001126:	e00a      	b.n	800113e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001128:	f7ff fa46 	bl	80005b8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	f241 3288 	movw	r2, #5000	; 0x1388
 8001136:	4293      	cmp	r3, r2
 8001138:	d901      	bls.n	800113e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e053      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f003 020c 	and.w	r2, r3, #12
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	429a      	cmp	r2, r3
 800114e:	d1eb      	bne.n	8001128 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001150:	4b27      	ldr	r3, [pc, #156]	; (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0307 	and.w	r3, r3, #7
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	429a      	cmp	r2, r3
 800115c:	d210      	bcs.n	8001180 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115e:	4b24      	ldr	r3, [pc, #144]	; (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f023 0207 	bic.w	r2, r3, #7
 8001166:	4922      	ldr	r1, [pc, #136]	; (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	4313      	orrs	r3, r2
 800116c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	683a      	ldr	r2, [r7, #0]
 8001178:	429a      	cmp	r2, r3
 800117a:	d001      	beq.n	8001180 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e032      	b.n	80011e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	d008      	beq.n	800119e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	4916      	ldr	r1, [pc, #88]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 800119a:	4313      	orrs	r3, r2
 800119c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d009      	beq.n	80011be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	490e      	ldr	r1, [pc, #56]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011be:	f000 f821 	bl	8001204 <HAL_RCC_GetSysClockFreq>
 80011c2:	4602      	mov	r2, r0
 80011c4:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	091b      	lsrs	r3, r3, #4
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	490a      	ldr	r1, [pc, #40]	; (80011f8 <HAL_RCC_ClockConfig+0x1c8>)
 80011d0:	5ccb      	ldrb	r3, [r1, r3]
 80011d2:	fa22 f303 	lsr.w	r3, r2, r3
 80011d6:	4a09      	ldr	r2, [pc, #36]	; (80011fc <HAL_RCC_ClockConfig+0x1cc>)
 80011d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_RCC_ClockConfig+0x1d0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9a8 	bl	8000534 <HAL_InitTick>

  return HAL_OK;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40022000 	.word	0x40022000
 80011f4:	40021000 	.word	0x40021000
 80011f8:	0800142c 	.word	0x0800142c
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000004 	.word	0x20000004

08001204 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <HAL_RCC_GetSysClockFreq+0x94>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 030c 	and.w	r3, r3, #12
 800122a:	2b04      	cmp	r3, #4
 800122c:	d002      	beq.n	8001234 <HAL_RCC_GetSysClockFreq+0x30>
 800122e:	2b08      	cmp	r3, #8
 8001230:	d003      	beq.n	800123a <HAL_RCC_GetSysClockFreq+0x36>
 8001232:	e027      	b.n	8001284 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001234:	4b19      	ldr	r3, [pc, #100]	; (800129c <HAL_RCC_GetSysClockFreq+0x98>)
 8001236:	613b      	str	r3, [r7, #16]
      break;
 8001238:	e027      	b.n	800128a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	0c9b      	lsrs	r3, r3, #18
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001244:	5cd3      	ldrb	r3, [r2, r3]
 8001246:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d010      	beq.n	8001274 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_RCC_GetSysClockFreq+0x94>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	0c5b      	lsrs	r3, r3, #17
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	4a11      	ldr	r2, [pc, #68]	; (80012a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800125e:	5cd3      	ldrb	r3, [r2, r3]
 8001260:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a0d      	ldr	r2, [pc, #52]	; (800129c <HAL_RCC_GetSysClockFreq+0x98>)
 8001266:	fb03 f202 	mul.w	r2, r3, r2
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	e004      	b.n	800127e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001278:	fb02 f303 	mul.w	r3, r2, r3
 800127c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	613b      	str	r3, [r7, #16]
      break;
 8001282:	e002      	b.n	800128a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <HAL_RCC_GetSysClockFreq+0x98>)
 8001286:	613b      	str	r3, [r7, #16]
      break;
 8001288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800128a:	693b      	ldr	r3, [r7, #16]
}
 800128c:	4618      	mov	r0, r3
 800128e:	371c      	adds	r7, #28
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40021000 	.word	0x40021000
 800129c:	007a1200 	.word	0x007a1200
 80012a0:	0800143c 	.word	0x0800143c
 80012a4:	0800144c 	.word	0x0800144c
 80012a8:	003d0900 	.word	0x003d0900

080012ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012b4:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <RCC_Delay+0x34>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <RCC_Delay+0x38>)
 80012ba:	fba2 2303 	umull	r2, r3, r2, r3
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	687a      	ldr	r2, [r7, #4]
 80012c2:	fb02 f303 	mul.w	r3, r2, r3
 80012c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012c8:	bf00      	nop
  }
  while (Delay --);
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1e5a      	subs	r2, r3, #1
 80012ce:	60fa      	str	r2, [r7, #12]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d1f9      	bne.n	80012c8 <RCC_Delay+0x1c>
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	20000000 	.word	0x20000000
 80012e4:	10624dd3 	.word	0x10624dd3

080012e8 <nut_nha>:
}
__weak void nut_nhan(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
}
__weak void nut_nha()
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <xulynutnhan>:




void xulynutnhan(nut_nhan_TypeDef_t *ButtonX)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	uint8_t trangthai = HAL_GPIO_ReadPin(ButtonX->GPIOx, ButtonX->GPIO_Pin);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	8a1b      	ldrh	r3, [r3, #16]
 8001304:	4619      	mov	r1, r3
 8001306:	4610      	mov	r0, r2
 8001308:	f7ff fbc8 	bl	8000a9c <HAL_GPIO_ReadPin>
 800130c:	4603      	mov	r3, r0
 800130e:	73fb      	strb	r3, [r7, #15]
	if (trangthai != ButtonX->filter)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	7bfa      	ldrb	r2, [r7, #15]
 8001316:	429a      	cmp	r2, r3
 8001318:	d00a      	beq.n	8001330 <xulynutnhan+0x3c>
	{
		ButtonX->filter = trangthai;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	701a      	strb	r2, [r3, #0]
		ButtonX->is_thaydoi = 1;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	705a      	strb	r2, [r3, #1]
		ButtonX->tg_loc_nhieu= HAL_GetTick();
 8001326:	f7ff f947 	bl	80005b8 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	605a      	str	r2, [r3, #4]
	}
	if ((ButtonX->is_thaydoi) && (HAL_GetTick()-ButtonX->tg_loc_nhieu >=15))
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	785b      	ldrb	r3, [r3, #1]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d00e      	beq.n	8001356 <xulynutnhan+0x62>
 8001338:	f7ff f93e 	bl	80005b8 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b0e      	cmp	r3, #14
 8001346:	d906      	bls.n	8001356 <xulynutnhan+0x62>
	{
		ButtonX->trangthai_cuoi = ButtonX->filter;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	721a      	strb	r2, [r3, #8]
		ButtonX->is_thaydoi =0;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	705a      	strb	r2, [r3, #1]
	}

	if ((ButtonX->trangthai_cuoi) != (ButtonX->trangthai_last))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7a1a      	ldrb	r2, [r3, #8]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	7a5b      	ldrb	r3, [r3, #9]
 800135e:	429a      	cmp	r2, r3
 8001360:	d015      	beq.n	800138e <xulynutnhan+0x9a>
	{
		if (ButtonX->trangthai_cuoi == 0) // nhan nut
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7a1b      	ldrb	r3, [r3, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d107      	bne.n	800137a <xulynutnhan+0x86>
		{
			nut_nhan(ButtonX->GPIOx,ButtonX->GPIO_Pin);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	8a1b      	ldrh	r3, [r3, #16]
 8001372:	4619      	mov	r1, r3
 8001374:	4610      	mov	r0, r2
 8001376:	f7fe fee9 	bl	800014c <nut_nhan>
		}
		if (ButtonX->trangthai_cuoi == 1) // nha nut
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7a1b      	ldrb	r3, [r3, #8]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d101      	bne.n	8001386 <xulynutnhan+0x92>
		{
			nut_nha();
 8001382:	f7ff ffb1 	bl	80012e8 <nut_nha>
		}
		ButtonX->trangthai_last = ButtonX->trangthai_cuoi;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	7a1a      	ldrb	r2, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	725a      	strb	r2, [r3, #9]
	}
}
 800138e:	bf00      	nop
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <nutnhan_init>:

void nutnhan_init (nut_nhan_TypeDef_t *ButtonX, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001396:	b480      	push	{r7}
 8001398:	b085      	sub	sp, #20
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	4613      	mov	r3, r2
 80013a2:	80fb      	strh	r3, [r7, #6]
	ButtonX->GPIOx = GPIOx;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	60da      	str	r2, [r3, #12]
	ButtonX->GPIO_Pin = GPIO_Pin;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	88fa      	ldrh	r2, [r7, #6]
 80013ae:	821a      	strh	r2, [r3, #16]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr

080013ba <memset>:
 80013ba:	4603      	mov	r3, r0
 80013bc:	4402      	add	r2, r0
 80013be:	4293      	cmp	r3, r2
 80013c0:	d100      	bne.n	80013c4 <memset+0xa>
 80013c2:	4770      	bx	lr
 80013c4:	f803 1b01 	strb.w	r1, [r3], #1
 80013c8:	e7f9      	b.n	80013be <memset+0x4>
	...

080013cc <__libc_init_array>:
 80013cc:	b570      	push	{r4, r5, r6, lr}
 80013ce:	2600      	movs	r6, #0
 80013d0:	4d0c      	ldr	r5, [pc, #48]	; (8001404 <__libc_init_array+0x38>)
 80013d2:	4c0d      	ldr	r4, [pc, #52]	; (8001408 <__libc_init_array+0x3c>)
 80013d4:	1b64      	subs	r4, r4, r5
 80013d6:	10a4      	asrs	r4, r4, #2
 80013d8:	42a6      	cmp	r6, r4
 80013da:	d109      	bne.n	80013f0 <__libc_init_array+0x24>
 80013dc:	f000 f81a 	bl	8001414 <_init>
 80013e0:	2600      	movs	r6, #0
 80013e2:	4d0a      	ldr	r5, [pc, #40]	; (800140c <__libc_init_array+0x40>)
 80013e4:	4c0a      	ldr	r4, [pc, #40]	; (8001410 <__libc_init_array+0x44>)
 80013e6:	1b64      	subs	r4, r4, r5
 80013e8:	10a4      	asrs	r4, r4, #2
 80013ea:	42a6      	cmp	r6, r4
 80013ec:	d105      	bne.n	80013fa <__libc_init_array+0x2e>
 80013ee:	bd70      	pop	{r4, r5, r6, pc}
 80013f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80013f4:	4798      	blx	r3
 80013f6:	3601      	adds	r6, #1
 80013f8:	e7ee      	b.n	80013d8 <__libc_init_array+0xc>
 80013fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80013fe:	4798      	blx	r3
 8001400:	3601      	adds	r6, #1
 8001402:	e7f2      	b.n	80013ea <__libc_init_array+0x1e>
 8001404:	08001450 	.word	0x08001450
 8001408:	08001450 	.word	0x08001450
 800140c:	08001450 	.word	0x08001450
 8001410:	08001454 	.word	0x08001454

08001414 <_init>:
 8001414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001416:	bf00      	nop
 8001418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800141a:	bc08      	pop	{r3}
 800141c:	469e      	mov	lr, r3
 800141e:	4770      	bx	lr

08001420 <_fini>:
 8001420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001422:	bf00      	nop
 8001424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001426:	bc08      	pop	{r3}
 8001428:	469e      	mov	lr, r3
 800142a:	4770      	bx	lr
